%-----------------------------------------------------
\chapter{Single Package Handoff}
\label{chap:single-package-handoff}

In this chapter, we consider the problem posed at the beginning of the Overview chapter. For convenience
we state the problem again below

\begin{displayquote}
Given the positions $P_i$ of $n$ drones (labelled 1 through $n$) 
in $\RR^2$ each capable of a maximum speed of $u_i \geq 0$. Also given is a package present 
at $S$ that needs to get to $T$. Each drone is capable of picking up the package and 
flying with speed $u_i$ to another point to hand the package off to another drone (which in turn 
hands the package off to another drone and so on). 
 
Find the best way to coordinate the movement of the drones to get the package from $S$ to $T$ in the least 
possible time i.e. minimize the makespan of the delivery process. 

\end{displayquote} 


Note that in the optimal schedule, it is easy to construct an example such that not all drones will necessarily participate
in getting the package from $S$ to $T$. The challenge is to figure out which subset of drones to use, 
along with the handoff points. 

However, the following observations are crucial for the development of algorithms in this chapter. 

\begin{flem}

\begin{enumerate}

   \item  For the single delivery package handoff problem,  a slower drone, 
          always hands off the package to a faster drone, in any optimal schedule. 
          Thus, once we \textit{know} which drones participate in the schedule, the order in which they participate in the handoff
          from start to finish is determined according to their speeds, sorted from lowest to highest. 
\footnote{This property is unfortunately 
not true when there are multiple packages to be delivered to their respective desitinations, even for the case where the sources
and targets for all the packages are the same. Examples where this happens are given in the next chapter.}
   
    \item All drones involved in the optimal schedule start moving at time $t=0$ at full speed along a straight line towards a handoff point . The drones not involved 
          can remain stationary since they don't participate in the package transport. 
    
    \item No drone waits on any other drone at the rendezvous points in any optimal schedule. i.e. if two drones rendezvous at some 
          point $H$, they arrive at $H$ are precisely the same time on the clock. 

    \item The path of the package is a monotonic piecewise straight polygonal curve with respect to the direction $\overrightharp{ST}$
          no matter what the intial positions $P_i$ or speeds $u_i$ of the drones. \footnote{We conjecture this property to be true 
          even for the case of multiple packages i.e. the path of travel of each package is monotonic with respect to the vectors $S_i T_i$'s}
\end{enumerate}


 \end{flem}


Before proceeding, we first fix some notation: 

\begin{itemize}
\item $(P_i, u_i)$ for $1 \leq i \leq n$ where $P_i \in \RR^2$ and $u_i \geq 0$, $S,T \in \RR^2$ respectively stand for the initial positions, speed, and source and target points for a package. 
\item $(S=H_{i_0}), H_{i_1} \ldots H_{i_k}$ for $0 \leq i_0, \ldots i_k \leq n$ stand for points where the drones with labels $i_0, \ldots i_k$ handle the package in that order. More precisely 
      $H_{i_j}$ is the point where drone $i_{j-1}$ hands off the package to drone $i_j$ for $1 \leq j \leq k$.  
\end{itemize}



\section{Wavefront Algorithms}
The algorithms in this section are inspired by the Continuous Dijkstra paradigm used in computing shortest paths for the Weighted Region Problem
and for computing euclidean shortest paths in the presence of polygonal obstacles \cite{mitchell1991weighted, mitchell1996shortest}. 
The approximation and locality properties of these heuristics are considered later in the chapter. 


The general idea is simple: consider expanding circular wavelets centered at the positions $P_i$, each expanding with speed $u_i$. The drones invovled in the schedule
are then calculated by observing how the wavelets interact in time. The various heuristics differ according to how the subset of drones involved in the delivery 
process is figured out based on nature of the ``wavefront'' used to keep track of the current tentative location of the package. 

Once this subset of drones is calculated,  we use convex optimization (via the convex optimization modelling language CVXPY \cite{diamond2016cvxpy}) 
to figure out \textit{exactly} the handoff points for the drones involved in transporting the package from the source to the destination. 

Precise details follow in the subsections below.


\subsection{Preliminary Data Structures} \hspace{10mm}

Before proceeding, lets design some housekeeping data-structures to 
represent the problem. The following data-structure simply maintains the 
information about the drones, the source and target used as input to the 
problem. To get a PHO tour for the package, algorithms are passed as
first class values to the method \verb|get_tour| of this class. 

Note that each algorithm does its own plotting and animation in a separate matplotlib window 
if so requested via the boolean flags \verb|plot_tour_p| , and \verb|animate_tour_p|. If both 
animation and plotting are requested they are done in separate windows each. 

%{python-mode}%
@D PHO Data Structures @{
class Single_PHO_Input:
    def __init__(self, drone_info = [] , source = None, target=None):
           self.drone_info = drone_info 
           self.source     = source
           self.target     = target

    def get_drone_pis (self):
           return [self.drone_info[idx][0] for idx in range(len(self.drone_info)) ]
           
    def get_drone_uis (self):
           return [self.drone_info[idx][1] for idx in range(len(self.drone_info)) ]
         
    def get_tour(self, algo, animate_tour_p=False, plot_tour_p=False):
           return algo( self.drone_info, 
                        self.source, 
                        self.target, 
                        animate_tour_p, 
                        plot_tour_p    )

    # Methods for \verb|ReverseHorseflyInput|
    def clearAllStates (self):
          self.drone_info = []
          self.source = None
          self.target = None

@| Single_PHO_Input @}
%{/python-mode}%

\subsection{One-Dimensional Greedy Wavefront} \hspace{10mm}


\begin{figure}[H]
\centering
\includegraphics[width=14cm]{images/circular_wavelets_intersect_along_st.pdf}
\caption{Intersection of two expanding wavelets along $\vec{S_iT}$}
\end{figure}

The following function calculates the time taken for a drone to move between two points at a given uniform speed
 


%{python-mode}%
@d PHO Algorithms @{
def time_of_travel(start, stop, speed):
     start = np.asarray(start)
     stop  = np.asarray(stop)
     return np.linalg.norm(stop-start)/speed
@| time_of_travel @}
%{/python-mode}%



%{python-mode}%
@D PHO Algorithms @{
def algo_odw(drone_info, source, target, 
             animate_tour_p = False,
             plot_tour_p    = False):

    from scipy.optimize import minimize

    source = np.asarray(source)
    target = np.asarray(target)
    sthat  = (target-source)/np.linalg.norm(target-source) # unit vector pointing from source to target

    numdrones  = len(drone_info)
    clock_time = 0.0

    # Find the drone which can get to the source the quickest
    tmin = np.inf
    imin = None
    for idx in range(numdrones):
         initdroneposn = drone_info[idx][0]
         dronespeed    = drone_info[idx][1]
         tmin_idx = time_of_travel(initdroneposn, source, dronespeed)

         if tmin_idx < tmin:
             tmin = tmin_idx
             imin = idx 

    clock_time = tmin

    current_package_handler_idx = imin
    current_package_position    = source

    drone_pool = range(numdrones)
    drone_pool.remove(imin) 
    used_drones = [imin]

    package_trail_straight = [current_package_position]

    package_reached_p   = False
    while not(package_reached_p):

          time_to_target_without_help =\
              np.linalg.norm((target-current_package_position))/drone_info[current_package_handler_idx][1]

          tI_min     = np.inf
          idx_tI_min = None
          for idx in drone_pool:
              
              us = drone_info[current_package_handler_idx][1]
              up = drone_info[idx][1]

              if up <= us: # slower drones are useless, so skip rest of the iteration
                  continue 
              else: 
                s = current_package_position 
                p = np.asarray(drone_info[idx][0]) 

                tI = get_interception_time(s, us, p, up, target, clock_time)

                if tI < tI_min:
                   tI_min     = tI
                   idx_tI_min = idx

          if time_to_target_without_help < tI_min :
              package_reached_p = True
              package_trail_straight.append(target)

          else:
              package_handler_speed    = drone_info[current_package_handler_idx][1] 
              current_package_position = current_package_position + package_handler_speed * (tI_min - clock_time) *  sthat
              package_trail_straight.append(current_package_position)
    
              clock_time                  = tI_min 
              current_package_handler_idx = idx_tI_min

              drone_pool.remove(idx_tI_min)
              used_drones.append(idx_tI_min)  
   
    package_trail_cvx = algo_pho_exact_given_order_of_drones ([drone_info[idx] for idx in used_drones],source,target )
    mspan_straight = makespan(drone_info, used_drones, package_trail_straight)
    mspan_cvx      = makespan(drone_info, used_drones, package_trail_cvx)
    
    if plot_tour_p:
         fig0, ax0 = plt.subplots()
         plot_tour(fig0, ax0, "ODW: Straight Line"       , source, target, drone_info, used_drones, package_trail)

         fig1, ax1 = plt.subplots()
         plot_tour(fig1, ax1, "ODE: Straight Line, Post Convex Optimization", source, target, drone_info, used_drones, package_trail_cvx)
         plt.show()

    if animate_tour_p:
        #ptraj  = zip(package_trail_cvx, used_drones + [None])
        animate_tour(drone_info, [package_trail] , used_drones,
                     animation_file_name_prefix='package_handoff_animation.mp4', 
                     algo_name='odw',  
                     render_trajectory_trails_p=True) 
    
    return used_drones, package_trail_straight, mspan_straight, package_trail_cvx, mspan_cvx
@| algo_odw @}
%{/python-mode}%

 

%{python-mode}%
@d PHO Algorithms @{

def extract_coordinates(points):

    xs, ys = [], []
    for pt in points:
        xs.append(pt[0])
        ys.append(pt[1])
    return np.asarray(xs), np.asarray(ys)


def get_interception_time(s, us, p, up, t, t0) :
    
    t_m = t - s # the _m subscript stands for modify
    t_m /= np.linalg.norm(t_m) # normalize to unit

    # For rotating a vector clockwise by theta, 
    # to get the vector t_m into alignment with (1,0)
    costh = t_m[0]/np.sqrt(t_m[0]**2 + t_m[1]**2)
    sinth = t_m[1]/np.sqrt(t_m[0]**2 + t_m[1]**2)

    rotmat = np.asarray([[costh, sinth],
                         [-sinth, costh]])
    
    assert np.linalg.norm((rotmat.dot(t_m) - np.asarray([1,0]))) <= 1e-6,\
           "Rotation matrix did not work properly. t_m should get rotated onto [1,0] after this transformation"

    p_shift  = p - s
    p_rot    = rotmat.dot(p_shift)
    [alpha, beta] = p_rot

    # Solve quadratic documented in the snippets above
    qroots = np.roots([ (1.0/us**2 - 1.0/up**2), 
               2*t0/us + 2*alpha/up**2 , 
               t0**2 - alpha**2/up**2 - beta**2/up**2])

    # The quadratic should always a root. 
    qroots = np.real(qroots) # in case the imaginary parts of the roots are really small, 
    qroots.sort()

    x = None
    for root in qroots:
        if root > 0.0:
           x = root
           break
    assert abs(x/us+t0 - np.sqrt((x-alpha)**2 + beta**2)/up) <= 1e-6 , "Quadratic not solved perfectly"

    tI = x/us + t0
    return tI
@| @}
%{/python-mode}%

When the drones involved in the package handoff process, along with the order of handoff is known in advance, 
we can find the handoff points exactly using convex optimization using SOCP. 

\section{Handoff in a particular order}

\begin{figure}[H]
\centering
\includegraphics[width=10cm]{images/pho-cvx.pdf}
\end{figure}


Given drones $P_i$, with speeds $u_i$ $1 \leq i \leq r-1$, the intial position $S$ and final destination $T$ for the package. 
The drones are expected to transport the package by handing of the package in the order $1,2,\ldots, r$.
Let $t_i$ denote the departure time on a global clock from the $i$'th handoff point $X_i$. 

Then the minimum time for transporting the package and the handoff points can be calculated according to the following 
convex program 


\noindent\fbox{%
    \parbox{\textwidth}{%

\begin{equation*}
\min_{t_i, X_i} \; \; \; t_{r-1} + \frac{||T-X_{r-1}||}{u_{r-1}}
\end{equation*}

subject to the constraints

\begin{align*}
X_0 &= S\\  
t_i &\geq \frac{||P_i-X_i||}{u_i} \qquad \qquad 0 \leq i \leq r-1\\
t_i + \frac{||X_{i+1}-X_i||}{u_i} &\leq t_{i+1} \qquad \qquad \qquad \;\;\;\; 0 \leq i \leq r-2
\end{align*}

    }%
}


The following function is just an implentation of the program above. 

%{python-mode}%
@D PHO Algorithms @{
def algo_pho_exact_given_order_of_drones ( drone_info, source, target ):
    import cvxpy as cp

    source = np.asarray(source)
    target = np.asarray(target)

    r = len(drone_info) 
    source = np.asarray(source)
    target = np.asarray(target)
    
    # Variables for rendezvous points of robot with package
    X, t = [], []
    for i in range(r):
       X.append(cp.Variable(2)) # vector variable
       t.append(cp.Variable( )) # scalar variable

    # Constraints 
    constraints_S = [  X[0] == source ]

    constraints_I = [] 
    for i in range(r):
        constraints_I.append( 0.0 <= t[i] )
        constraints_I.append( t[i] >= cp.norm( np.asarray(drone_info[i][0]) - X[i]) / drone_info[i][1] )

    constraints_L = []
    for i in range(r-1):
         constraints_L.append( t[i] + cp.norm(X[i+1] - X[i])/drone_info[i][1] <= t[i+1] )

    objective = cp.Minimize(  t[r-1]  + cp.norm( target - X[r-1]  )/drone_info[r-1][1]  )

    prob = cp.Problem(objective, constraints_S + constraints_I + constraints_L)
    print Fore.CYAN
    prob.solve(solver=cp.SCS,verbose=True)
    print Style.RESET_ALL
    
    package_trail = [ np.asarray(X[i].value) for i in range(r) ] + [ target ]
    return package_trail
@| @}
%{/python-mode}%

\section{Plotting}

We plot the tours onto a separate window if the switch \verb|plot_tour_p| is set to \verb|True| 
while calling the algorithm. The path of the package is shown in bold red. The paths of the drones 
from their initial positions to the point where they pick up the package from another drone 
are shown in blue.

An example is shown below: 



\begin{figure}[H]
\centering
\includegraphics[width=8cm]{images/pho_example_plot.pdf}
\end{figure}


%{python-mode}%
@D PHO Algorithms @{

def plot_tour(fig, ax, figtitle, source, target, 
              drone_info, used_drones, package_trail,
              xlims=[0,1],
              ylims=[0,1],
              aspect_ratio=1.0):

    import matplotlib.ticker as ticker
    ax.set_aspect(aspect_ratio)
    ax.set_xlim(xlims)
    ax.set_ylim(ylims)

    plt.rc('font', family='serif')


    # Draw the package trail
    xs, ys = extract_coordinates(package_trail)
    ax.plot(xs,ys, 'ro', markersize=5 )
    for idx in range(len(xs)-1):
          plt.arrow( xs[idx], ys[idx], xs[idx+1]-xs[idx], ys[idx+1]-ys[idx], 
                    **{'length_includes_head': True, 
                       'width': 0.007 , 
                       'head_width':0.03, 
                       'fc': 'r', 
                       'ec': 'none',
                       'alpha': 0.8})


    # Draw the source, target, and initial positions of the robots as bold dots
    xs,ys = extract_coordinates([source, target])
    ax.plot(xs,ys, 'o', markersize=12, alpha=0.8, ms=10, mec='k', mfc='#F1AB30' )
    #ax.plot(xs,ys, 'k--', alpha=0.6 ) # light line connecting source and target

    ax.text(source[0], source[1], 'S', fontsize=10,\
            horizontalalignment='center',verticalalignment='center')
    ax.text(target[0], target[1], 'T', fontsize=10,\
            horizontalalignment='center',verticalalignment='center')

    xs, ys = extract_coordinates( [ drone_info[idx][0] for idx in range(len(drone_info)) ]  )
    ax.plot(xs,ys, 'o', markersize=10, alpha = 0.5, mec='None', mfc='#b7e8cc' )

    # Draw speed labels
    for idx in range(len(drone_info)):
         ax.text( drone_info[idx][0][0], drone_info[idx][0][1], format(drone_info[idx][1],'.2f'),
                  fontsize=4, horizontalalignment='center', verticalalignment='center' )

    # Draw drone path from initial position to interception point
    for pt, idx in zip(package_trail, used_drones):
         initdroneposn = drone_info[idx][0]
         handoffpoint  = pt
    
         xs, ys = extract_coordinates([initdroneposn, handoffpoint])
         plt.arrow( xs[0], ys[0], xs[1]-xs[0], ys[1]-ys[0], 
                    **{'length_includes_head': True, 
                       'width': 0.005 , 
                       'head_width':0.02, 
                       'fc': 'b', 
                       'ec': 'none'})







    fig.suptitle(figtitle, fontsize=15)
    ax.set_title('\nMakespan: ' + format(makespan(drone_info, used_drones, package_trail),'.5f'), fontsize=8)

    startx, endx = ax.get_xlim()
    starty, endy = ax.get_ylim()

    ax.xaxis.set_ticks(np.arange(startx, endx, 0.4))
    ax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%0.1f'))

     
    ax.yaxis.set_ticks(np.arange(starty, endy, 0.4))
    ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%0.1f'))

    plt.yticks(fontsize=5, rotation=90)
    plt.xticks(fontsize=5)


    # A light grid
    #plt.grid(color='0.5', linestyle='--', linewidth=0.5)
@| @}
%{/python-mode}%


By makespan, we mean the time taken for the package to travel from $S$ to $T$.


%{python-mode}%
@d PHO Algorithms @{
def makespan(drone_info, used_drones, package_trail):

    assert len(package_trail) == len(used_drones)+1, ""

    makespan = 0.0   
    counter  = 0    
    for idx in used_drones:
         dronespeed    = drone_info[idx][1]          

         makespan += time_of_travel(package_trail[counter],\
                                    package_trail[counter+1],
                                    dronespeed) 
         counter += 1
    
    return makespan
@| @}
%{/python-mode}%
  









\newpage
\section{Run Handler associated with this Chapter}


%{python-mode}%
@D  PHO Run Handlers @{
def single_pho_run_handler():
    import random
    def wrapperEnterRunPoints(fig, ax, run):
      def _enterPoints(event):
        if event.name      == 'button_press_event'          and \
           (event.button   == 1 or event.button == 3)       and \
            event.dblclick == True and event.xdata  != None and event.ydata  != None:

             if event.button == 1:  
                 # Insert blue circle representing the initial position of a drone
                 print Fore.GREEN
                 newPoint = (event.xdata, event.ydata)
                 speed    = float(raw_input('What speed do you want for the drone at '+str(newPoint)))
                 run.drone_info.append( (newPoint, speed) ) 
                 patchSize  = (xlim[1]-xlim[0])/40.0
                 print Style.RESET_ALL
                 
                 ax.add_patch( mpl.patches.Circle( newPoint, radius = patchSize,
                                                   facecolor='#b7e8cc', edgecolor='black'  ))

                 ax.text( newPoint[0], newPoint[1], speed, fontsize=15, 
                          horizontalalignment='center', verticalalignment='center' )

                 ax.set_title('Number of drones inserted: ' +\
                              str(len(run.drone_info)), fontdict={'fontsize':25})
                 
             elif event.button == 3:  
                 # Insert big red circles representing the source and target points
                 patchSize  = (xlim[1]-xlim[0])/50.0
                 if run.source is None:    
                      run.source = (event.xdata, event.ydata)  
                      ax.add_patch( mpl.patches.Circle( run.source, radius = patchSize, 
                                                        facecolor= '#ffd9d6', edgecolor='black', lw=1.0 ))
                      ax.text( run.source[0], run.source[1], 'S', fontsize=15, 
                               horizontalalignment='center', verticalalignment='center' )

                 elif run.target is None:
                      run.target = (event.xdata, event.ydata)  
                      ax.add_patch( mpl.patches.Circle( run.target, radius = patchSize, 
                                                       facecolor= '#ffd9d6', edgecolor='black', lw=1.0 ))
                      ax.text( run.target[0], run.target[1], 'T', fontsize=15, 
                               horizontalalignment='center', verticalalignment='center' )
                 else:
                       print Fore.RED, "Source and Target already set", Style.RESET_ALL
             # Clear polygon patches and set up last minute \verb|ax| tweaks
             clearAxPolygonPatches(ax)
             applyAxCorrection(ax)
             fig.canvas.draw()
      return _enterPoints

    # The key-stack argument is mutable! I am using this hack to my advantage.
    def wrapperkeyPressHandler(fig, ax, run): 
           def _keyPressHandler(event):
               if event.key in ['i', 'I']:  

                    # Select algorithm to execute
                    algo_str = raw_input(Fore.YELLOW                                             +\
                            "Enter algorithm to be used to compute the tour:\n Options are:\n"   +\
                            " (odw)     One Dimensional Wavefront \n"                            +\
                            Style.RESET_ALL)

                    algo_str = algo_str.lstrip()
                     
                    # Incase there are patches present from the previous clustering, just clear them
                    clearAxPolygonPatches(ax)
                    if   algo_str == 'odw':
                          tour = run.get_tour( algo_odw )
                    else:
                          print "Unknown option. No horsefly for you! ;-D "
                          sys.exit()
                    applyAxCorrection(ax)
                    fig.canvas.draw()
                    
               elif event.key in ['c', 'C']: 
                    # Clear canvas and states of all objects
                    run.clearAllStates()
                    ax.cla()
                                  
                    applyAxCorrection(ax)
                    ax.set_xticks([])
                    ax.set_yticks([])
                                     
                    fig.texts = []
                    fig.canvas.draw()
           return _keyPressHandler
    
    # Set up interactive canvas
    fig, ax =  plt.subplots()
    run = Single_PHO_Input()
        
    from matplotlib import rc
    
    # specify the custom font to use
    plt.rcParams['font.family'] = 'sans-serif'
    plt.rcParams['font.sans-serif'] = 'Times New Roman'

    ax.set_xlim([xlim[0], xlim[1]])
    ax.set_ylim([ylim[0], ylim[1]])
    ax.set_aspect(1.0)
    ax.set_xticks([])
    ax.set_yticks([])
          
    ax.set_title("Enter drone positions, source and target onto canvas. \n \
(Enter speeds into the terminal, after inserting a drone at a particular position)")

    mouseClick   = wrapperEnterRunPoints (fig,ax, run)
    fig.canvas.mpl_connect('button_press_event' , mouseClick)
          
    keyPress     = wrapperkeyPressHandler(fig,ax, run)
    fig.canvas.mpl_connect('key_press_event', keyPress   )
    
    plt.show()
@| single_pho_run_handler @}
%{/python-mode}%




\chapter{Experiments}


\section{Single Package Handoff}

\subsection{Experiment 1: Comparing Makespans of various heuristics for randomly generated instances}



%{python-mode}%
@d PHO Experiments @{
def experiment_1():
    # generate the experiments folder
    import shutil
    import os
    import random
    from datetime import datetime
    import yaml


    #random.seed(6)
    random.seed(7)

   
    # Uniform random points
    source_init  = np.asarray([-1.0,0]) 
    target_init  = np.asarray([ 1.0,0]) 
    
    exsize = 100
    exreps = 10
    dtheta = 2.0*np.pi/exreps

    dir = 'pho_experiment_1' + '_exsize_' + str(exsize)
    if os.path.exists(dir):
       shutil.rmtree(dir)

    os.makedirs(dir)


    xs     = [ random.uniform(-1,1) for _ in range(exsize) ] 
    ys     = [ random.uniform(-1,1) for _ in range(exsize)] 

    initdroneposns = map(np.asarray, zip(xs,ys))
    utils_algo.print_list(initdroneposns)
    
    speeds = [random.uniform(0.01,1.) for _ in range(exsize)]
    drone_info = zip(initdroneposns, speeds)

    for idx in range(exreps):
        
         th    = idx * dtheta
         costh = np.cos(th)
         sinth = np.sin(th)

         rotmat = np.asarray([[costh, sinth],
                              [-sinth, costh]])
   
         source = rotmat.dot(source_init)
         target = rotmat.dot(target_init)

         run = Single_PHO_Input(drone_info, source, target)

         # Execute the algorithm and unpack the data
         used_drones,           \
         package_trail_straight,\
         mspan_straight,        \
         package_trail_cvx,      \
         mspan_cvx = run.get_tour(algo_odw, 
                                  animate_tour_p = False, 
                                  plot_tour_p    = False )     

         trivial_lower_bound = np.linalg.norm(target-source)/max(speeds) 

         print "Used Drones: "   , used_drones 
         print "\n"
         print Fore.CYAN, "Package Trail Straight: " , Style.RESET_ALL
         utils_algo.print_list(package_trail_straight)
         print "\n"
         print Fore.CYAN, "Package Trail CVX: ", Style.RESET_ALL        
         utils_algo.print_list(package_trail_cvx)

         print Fore.RED, "mspan_straight: ",  mspan_straight, "\n mspan_cvx:      ", mspan_cvx, Style.RESET_ALL
         print "Dilation Factor:(CVX to Straight) ", mspan_straight/mspan_cvx
         print ""
         print "CVX Solution within: ", Fore.CYAN,  mspan_cvx/trivial_lower_bound , Style.RESET_ALL, " of optimum"

         # Write data to YAML file
         data = {'drone_info'  : drone_info,
                 'source'      : source,
                 'target'      : target,
                 'used_drones' : used_drones, 
                 'odw_straight': {'package_trail': package_trail_straight,
                                  'makespan'     : mspan_straight},

                 'odw_cvx'     : {'package_trail': package_trail_cvx,
                                  'makespan'     : mspan_cvx },
                 'trivial_lower_bound': trivial_lower_bound}

         subdir = 'data_exsize_'+str(exsize) + '_repnum_' + str(idx)
         os.makedirs(dir + '/' + subdir)
   
         filename = dir + '/' + subdir + '/' + subdir + '.yml'
         with open(filename, 'w') as outfile:
             yaml.dump(data, outfile, default_flow_style=True)

         eps = 1e-1
         fig, ax = plt.subplots()
         plot_tour(fig, ax, "Package Handoff: ODW Heuristic", 
                   source, target, drone_info, used_drones, 
                   package_trail_cvx, 
                   xlims=[-1-eps,1+eps], 
                   ylims=[-1-eps,1+eps], 
                   aspect_ratio=1.0)
         print Fore.RED, "Saving figure to disk : ", idx, Style.RESET_ALL
         plt.savefig(dir + '/' + subdir + '/' + subdir + 
                     '.png', bbox_inches="tight", dpi=200)
         plt.savefig(dir+'/plot'+str(idx).zfill(4)+'.png', bbox_inches="tight", dpi=200 )

    import subprocess
    command =  "ffmpeg -r 4 -f image2 -s 1920x1080 -i " + dir +"/plot%04d.png -vcodec libx264 -crf 25  -pix_fmt yuv420p pho_handoff_animation_different_source_target.mp4"
    subprocess.call(command.split())
          
@| @}
%{/python-mode}%



\section{Chapter Index of Fragments}
@m
\section{Chapter Index of Identifiers}
@u 
%------------------------------------------------------