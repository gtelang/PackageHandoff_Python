\chapter{Supporting Code}

\section{Main File}



%{python-mode}%
@O ../src/pho-main.py -cp @{
# Relevant imports for Package Handoff

from colorama import Fore, Style
from matplotlib import rc
from scipy.optimize import minimize
from sklearn.cluster import KMeans
import argparse
import inspect 
import itertools
import logging
import math
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import os
import pprint as pp
import randomcolor 
import sys
import time
import utils_algo
import utils_graphics

@< PHO Data Structures @>
@< PHO Algorithms @>
@< PHO Run Handlers@>

# Set up logging information relevant to this module
logger=logging.getLogger(__name__)
logging.basicConfig(level=logging.DEBUG)

def debug(msg):
    frame,filename,line_number,function_name,lines,index=inspect.getouterframes(
        inspect.currentframe())[1]
    line=lines[0]
    indentation_level=line.find(line.lstrip())
    logger.debug('{i} [{m}]'.format(
        i='.'*indentation_level, m=msg))


def info(msg):
    frame,filename,line_number,function_name,lines,index=inspect.getouterframes(
        inspect.currentframe())[1]
    line=lines[0]
    indentation_level=line.find(line.lstrip())
    logger.info('{i} [{m}]'.format(
        i='.'*indentation_level, m=msg))

xlim, ylim = [0,1], [0,1]

def applyAxCorrection(ax):
      ax.set_xlim([xlim[0], xlim[1]])
      ax.set_ylim([ylim[0], ylim[1]])
      ax.set_aspect(1.0)

def clearPatches(ax):
    # Get indices cooresponding to the polygon patches
    for index , patch in zip(range(len(ax.patches)), ax.patches):
        if isinstance(patch, mpl.patches.Polygon) == True:
            patch.remove()
    ax.lines[:]=[]
    applyAxCorrection(ax)

def clearAxPolygonPatches(ax):

    # Get indices cooresponding to the polygon patches
    for index , patch in zip(range(len(ax.patches)), ax.patches):
        if isinstance(patch, mpl.patches.Polygon) == True:
            patch.remove()
    ax.lines[:]=[]
    applyAxCorrection(ax)



##################################
#### Buggy don't use! 
##################################

def animate_tour(drone_info, 
                 package_trajectories, 
                 used_drones, 
                 animation_file_name_prefix, 
                 algo_name,  
                 render_trajectory_trails_p = True):
    import matplotlib.animation as animation
    from   matplotlib.patches import Circle

    # Set up configurations and parameters for all necessary graphics
    plt.rc('text', usetex=True)
    plt.rc('font', family='serif')

    fig, ax = plt.subplots()
    ax.set_xlim([0,1])
    ax.set_ylim([0,1])
    ax.set_aspect('equal')

    ax.set_xticks(np.arange(0, 1, 0.1))
    ax.set_yticks(np.arange(0, 1, 0.1))

    # Turn on the minor TICKS, which are required for the minor GRID
    ax.minorticks_on()

    # customize the major grid
    ax.grid(which='major', linestyle='--', linewidth='0.3', color='red')

    # Customize the minor grid
    ax.grid(which='minor', linestyle=':', linewidth='0.3', color='black')

    ax.get_xaxis().set_ticklabels([])
    ax.get_yaxis().set_ticklabels([])

    number_of_drones   = len(used_drones) # A drone trajectory consits of the id of the drone, followed by the actual trajectory trail
    number_of_packages = len(package_trajectories)
    colors             = utils_graphics.get_colors(number_of_packages, lightness=0.5)
    ims                = []
    
    # Constant for discretizing each segment inside the trajectories of the packages and drones
    NUM_SUB_LEGS              = 50 # Number of subsegments within each segment of every trajectory
    
    # Arrays keeping track of the states of the packages
    packages_reached_endpt_p    = [False        for  i    in range(number_of_packages)]
    packages_traj_num_legs      = [len(traj)-1  for  traj in package_trajectories     ] # the -1 is because the initial position of the package is always included. 
    packages_current_leg_idx    = [0            for  i    in range(number_of_packages)]
    packages_current_subleg_idx = [0            for  i    in range(number_of_packages)] 
    packages_current_posn       = [traj[0]      for traj in package_trajectories    ]

    # Arrays keeping track of the states of the drones
    drones_reached_rendz_p    = [False                for  i    in range(number_of_drones) ]
    drones_current_subleg_idx = [0                    for i     in range(number_of_drones) ] 
    drones_current_posn       = [drone_info[idx][0]   for idx   in used_drones             ]

    ptraj               = package_trajectories[0]
    drones_trajectories = zip(drones_current_posn, ptraj)

    # The drone collection process ends, when all packages reach their endpoints
    image_frame_counter = 0
    while not(all(packages_reached_endpt_p)): 
    
        #-------------------------------------
        # Update the states of all the drones
        #-------------------------------------
        for dridx in range(number_of_drones):
             if drones_reached_rendz_p[dridx] == False :
                  dtraj = drones_trajectories[dridx]
                  if drones_current_subleg_idx[dridx] <= NUM_SUB_LEGS-2:

                    drones_current_subleg_idx[dridx] += 1     # subleg idx changes

                    sublegidx = drones_current_subleg_idx[dridx] # shorthand for easier reference in the next two lines
                    xcurr = np.linspace( dtraj[0][0], dtraj[1][0], NUM_SUB_LEGS+1 )[sublegidx]
                    ycurr = np.linspace( dtraj[0][1], dtraj[1][1], NUM_SUB_LEGS+1 )[sublegidx]
                    drones_current_posn[dridx]  = [xcurr, ycurr]

                  else:
                    #drones_current_subleg_idx[dridx] = 0 # reset to 0

                    xcurr, ycurr = dtraj[0][0], dtraj[0][1] # current position is the zeroth point on the next leg
                    drones_current_posn[dridx]  = [xcurr , ycurr]

                    if drones_current_subleg_idx[dridx] == NUM_SUB_LEGS-1:
                        drones_reached_rendz_p[dridx] = True



        #-----------------------------------------
        # Update the states of all the packages
        #-----------------------------------------
        for pkgidx in range(number_of_packages):
            #if packages_reached_endpt_p[pkgidx] == False:
              #if drones_reached_rendz_p[0] == True:  
              #if  np.linalg.norm( np.asarray(packages_current_posn[pkgidx]) - np.asarray(drones_current_posn[0]) ) < 0.001 :  
                  ptraj = package_trajectories[pkgidx]
                  if packages_current_subleg_idx[pkgidx] <= NUM_SUB_LEGS-2:

                    packages_current_subleg_idx[pkgidx] += 1     # subleg idx changes
                    legidx    = packages_current_leg_idx[pkgidx] # the legidx remains the same

                    sublegidx = packages_current_subleg_idx[pkgidx] # shorthand for easier reference in the next two lines
                    xcurr = np.linspace( ptraj[legidx][0], ptraj[legidx+1][0], NUM_SUB_LEGS+1 )[sublegidx]
                    ycurr = np.linspace( ptraj[legidx][1], ptraj[legidx+1][1], NUM_SUB_LEGS+1 )[sublegidx]
                    packages_current_posn[pkgidx]  = [xcurr, ycurr]


                  else:
                    packages_current_subleg_idx[pkgidx] = 0 # reset to 0
                    packages_current_leg_idx[pkgidx]   += 1 # you have passed onto the next leg
                    legidx    = packages_current_leg_idx[pkgidx]

                    xcurr, ycurr = ptraj[legidx][0], ptraj[legidx][1] # current position is the zeroth point on the next leg
                    packages_current_posn[pkgidx]  = [xcurr , ycurr]

                    if packages_current_leg_idx[pkgidx] == packages_traj_num_legs[pkgidx]:
                        packages_reached_endpt_p[pkgidx] = True
 
            
         
        #----------------
        # Rendering
        #----------------
        objs = []
        # Render all the package trajectories uptil this point in time.  
        for pkgidx in range(number_of_packages):
            traj                 = package_trajectories[pkgidx]
            current_package_posn = packages_current_posn[pkgidx]

            if packages_current_leg_idx[pkgidx] != packages_traj_num_legs[pkgidx]: # the package is still moving

                  xhs = [traj[k][0] for k in range(1+packages_current_leg_idx[pkgidx])] + [current_package_posn[0]]
                  yhs = [traj[k][1] for k in range(1+packages_current_leg_idx[pkgidx])] + [current_package_posn[1]]

            else: # The package has stopped moving
                  xhs = [x for (x,y) in traj]
                  yhs = [y for (x,y) in traj]

            print "-----------------------------------------------------"
            print Fore.RED, "plotting package line", Style.RESET_ALL
            print "-----------------------------------------------------"
            packageline, = ax.plot(np.asarray(xhs),np.asarray(yhs),'o-', 
                                   linewidth=5.0,markersize=10, alpha=0.8, color='#D13131')
            packageloc   = Circle( np.asarray([current_package_posn[0], current_package_posn[1]]), 0.015, 
                                    facecolor = '#D13131', 
                                    edgecolor='k',  
                                    alpha=1.00)
            packagepatch = ax.add_patch(packageloc)
            objs.append(packageline)
            objs.append(packagepatch)

        # Render all the drone trajectories   uptil this point in time
        for dridx in range(number_of_drones):
            traj                 = drones_trajectories[dridx]
            current_drone_posn = drones_current_posn[dridx]

            if drones_current_subleg_idx[dridx] != NUM_SUB_LEGS-1 : # the drone is still moving

                  xhs = [ traj[0][0] ] + [current_drone_posn[0]]
                  yhs = [ traj[0][1] ] + [current_drone_posn[1]]

            else: # The drone has stopped moving
                  xhs = [x for (x,y) in traj]
                  yhs = [y for (x,y) in traj]

            print "-----------------------------------------------------"
            print Fore.RED, "plotting drone line", Style.RESET_ALL
            print "-----------------------------------------------------"
            droneline, = ax.plot(np.asarray(xhs),np.asarray(yhs),'o-', 
                                   linewidth=5.0,markersize=10, alpha=0.8, color='g')
            droneloc   = Circle( np.asarray([current_drone_posn[0], current_drone_posn[1]]), 0.015, 
                                    facecolor = 'g', 
                                    edgecolor='g',  
                                    alpha=1.00)
            dronepatch = ax.add_patch(droneloc)
            objs.append(droneline)
            objs.append(dronepatch)

        print "........................"
        print "Appending to ims ", image_frame_counter
        ims.append(objs) 
        image_frame_counter += 1


    debug(Fore.CYAN + "\nStarted constructing ani object"+ Style.RESET_ALL)
    ani = animation.ArtistAnimation(fig, ims, interval=200, blit=True)
    debug(Fore.CYAN + "\nFinished constructing ani object"+ Style.RESET_ALL)

    #debug(Fore.MAGENTA + "\nStarted writing animation to disk"+ Style.RESET_ALL)
    #ani.save(animation_file_name_prefix+'.avi', dpi=100)
    #debug(Fore.MAGENTA + "\nFinished writing animation to disk"+ Style.RESET_ALL)
    
    plt.show()




if __name__=="__main__":
     print "Running Package Handoff"
     single_pho_run_handler()

@|  @}
%{/python-mode}%


\section{Algorithmic Utilities}

%{python-mode}%
@O ../src/utils_algo.py -cp @{    
 
import numpy as np
import random
from colorama import Fore
from colorama import Style

def vector_chain_from_point_list(pts):
    vec_chain = []
    for pair in zip(pts, pts[1:]):
        tail= np.array (pair[0])
        head= np.array (pair[1])
        vec_chain.append(head-tail)

    return vec_chain

def length_polygonal_chain(pts):
    vec_chain = vector_chain_from_point_list(pts)

    acc = 0
    for vec in vec_chain:
        acc = acc + np.linalg.norm(vec)
    return acc
def pointify_vector (x):
    if len(x) % 2 == 0:
        pts = []
        for i in range(len(x))[::2]:
            pts.append( [x[i],x[i+1]] )
        return pts
    else :
        sys.exit('List of items does not have an even length to be able to be pointifyed')
def flatten_list_of_lists(l):
       return [item for sublist in l for item in sublist]
def print_list(xs):
    for x in xs:
        print x
def partial_sums( xs ):
    psum = 0
    acc = []
    for x in xs:
        psum = psum+x
        acc.append( psum )
    return acc
def are_site_orderings_equal(sites1, sites2):

    for (x1,y1), (x2,y2) in zip(sites1, sites2): 
        if (x1-x2)**2 + (y1-y2)**2 > 1e-8:
            return False
    return True
def bunch_of_non_uniform_random_points(numpts):
    cluster_size = int(np.sqrt(numpts)) 
    numcenters   = cluster_size
    
    import scipy
    import random
    centers = scipy.rand(numcenters,2).tolist()

    scale, points = 4.0, []
    for c in centers:
        cx, cy = c[0], c[1]
        # For current center $c$ of this loop, generate \verb|cluster_size| points uniformly in a square centered at it
           
        sq_size      = min(cx,1-cx,cy, 1-cy)
        loc_pts_x    = np.random.uniform(low=cx-sq_size/scale, high=cx+sq_size/scale, size=(cluster_size,))
        loc_pts_y    = np.random.uniform(low=cy-sq_size/scale, high=cy+sq_size/scale, size=(cluster_size,))
        points.extend(zip(loc_pts_x, loc_pts_y))
        

    # Whatever number of points are left to be generated, generate them uniformly inside the unit-square
       
    num_remaining_pts = numpts - cluster_size * numcenters
    remaining_pts = scipy.rand(num_remaining_pts, 2).tolist()
    points.extend(remaining_pts)
    

    return points
    
def write_to_yaml_file(data, dir_name, file_name):
   import yaml
   with open(dir_name + '/' + file_name, 'w') as outfile:
     yaml.dump( data, outfile, default_flow_style = False)
 

@|  @}
%{/python-mode}%



\section{Graphical Utilities}


%{python-mode}%
@O ../src/utils_graphics.py -cp @{    

from matplotlib import rc
from colorama import Fore
from colorama import Style
from scipy.optimize import minimize
from sklearn.cluster import KMeans
import argparse
import itertools
import math
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import os
import pprint as pp
import randomcolor 
import sys
import time

xlim, ylim = [0,1], [0,1]

# Borrowed from https://stackoverflow.com/a/9701141
import numpy as np
import colorsys

def get_colors(num_colors, lightness=0.2):
    colors=[]
    for i in np.arange(60., 360., 300. / num_colors):
        hue        = i/360.0
        saturation = 0.95
        colors.append(colorsys.hls_to_rgb(hue, lightness, saturation))
    return colors
@|  @}
%{/python-mode}%
